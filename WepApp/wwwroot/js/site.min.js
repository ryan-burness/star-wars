class LocalStorageManager { constructor(t) { this.prefix = t, this.storage = null; try { localStorage.setItem(this.prefix, "test"), "test" === localStorage.getItem(this.prefix) ? (localStorage.removeItem(this.prefix), this.storage = localStorage) : this.storage = {} } catch (t) { this.storage = {} } } setItem(t, e) { const a = Date.now(); this.storage[this.prefix + "-" + t] = JSON.stringify({ timestamp: a, value: e }) } getItem(t) { const e = this.storage[this.prefix + "-" + t]; if (e) { const a = JSON.parse(e); return Date.now() - a.timestamp <= 6048e5 ? a.value : (this.removeItem(t), null) } return null } removeItem(t) { delete this.storage[this.prefix + "-" + t] } } class CharacterManager { constructor(t) { this.apiUrl = t, this.key = "characterM-", this.storageManager = new LocalStorageManager(this.key), this.collectionKey = "selections", this.templateElement = null, this.dailyCostTargetTotal = 0, this.dailyCostTargetKey = "dailyCostTarget"; try { const t = document.querySelector("#characterMasterCard"); this.templateElement = t.cloneNode(!0), t.remove() } catch (t) { console.error("Couldnt set template element") } } async getCharactersFromApi() { const t = new AbortController, e = setTimeout((() => t.abort()), 2e4); try { const e = await fetch(this.apiUrl, { signal: t.signal }); if (!e.ok) throw new Error(`HTTP error! status: ${e.status}`); const a = await e.json(); if (!a || !a.results || 0 === a.results.length) throw new Error("No data received"); return a.results } catch (t) { throw t } finally { clearTimeout(e) } } createCharacterDomElement(t) { if (!this.templateElement) return; const e = this.templateElement.cloneNode(!0), a = e.querySelector("#planet-section"); if (e.classList.remove("d-none"), e.removeAttribute("id"), a.removeAttribute("id"), null != t.image && t.image.trim().length > 0 && (e.querySelector(".character-img img").src = t.image), e.querySelector(".character-title").textContent = t.name, null != t.families && t.families.length > 0) { let a = ""; t.families.forEach((t => { a = a + t.name + ", " })), e.querySelector(".character-subtitle").textContent = a.replace(/(^[,\s]+)|([,\s]+$)/g, "") } if (null != t.homeworld) { a.querySelector(".planet-img img").src = t.homeworld.image, a.querySelector(".planet-name").textContent = t.homeworld.name, a.querySelector(".planet-cost").textContent = t.homeworld.fees_per_day; const e = a.querySelector(".planet-btn-sel"); e.setAttribute("data-swc-option", t.external_reference), e.setAttribute("data-swc-cost", t.homeworld.fees_per_day) } else a.remove(); return e } calculateTotalCost() { const t = this.getSelections(); if (!t) return; const e = t.reduce(((t, e) => t + parseFloat(e.cost)), 0); document.querySelector("#daily-fee-total").innerText = e.toLocaleString("en-US"), e == this.getDailyCostTargetTotal() ? document.querySelector("#action-content-success").classList.remove("d-none") : document.querySelector("#action-content-success").classList.add("d-none") } getSelections() { return this.storageManager.getItem(this.collectionKey) || [] } setSelections(t) { this.storageManager.setItem(this.collectionKey, t) } getDailyCostTargetTotal() { return this.storageManager.getItem(this.dailyCostTargetKey) || 0 } setDailyCostTargetTotal(t) { this.storageManager.setItem(this.dailyCostTargetKey, t) } removeSelections() { this.storageManager.removeItem(this.collectionKey) } handleButtonClick(t) { const e = t.target; if ("BUTTON" !== e.tagName) return; const a = e.getAttribute("data-swc-option"), r = e.getAttribute("data-swc-cost"), s = e.classList.contains("active"); if (!a || !r) return; const o = this.getSelections(); if (s) this.unselectCharacterEl(e), this.setSelections(o.filter((t => t.option !== a))); else { this.selectCharacterEl(e); const t = { option: a, cost: r }; this.setSelections(this.mergeAndReplace(o, t)) } this.calculateTotalCost() } unselectCharacterEl(t) { t.classList.remove("active"), t.textContent = "Select"; t.closest(".character-card").querySelector(".card-status").classList.add("d-none") } selectCharacterEl(t) { t.classList.add("active"), t.textContent = "Remove"; t.closest(".character-card").querySelector(".card-status").classList.remove("d-none") } mergeAndReplace(t, e) { const a = new Map; return t.concat(e).forEach((t => a.set(t.option, t))), Array.from(a.values()) } populateCharactersList(t) { if (!this.templateElement || !Array.isArray(t) || 0 === t.length) return void this.showNoResultsTab(); this.showLoadingTab(); const e = document.querySelector("#characters-list"); e.children.length > 0 && (e.innerHTML = ""); t.map(this.createCharacterDomElement.bind(this)).forEach((t => { e.appendChild(t) })), e.addEventListener("click", this.handleButtonClick.bind(this)), this.showCharactersTab(), 0 == this.getDailyCostTargetTotal() ? this.createTargetTotal() : this.setTargetTotal(this.getDailyCostTargetTotal()); const a = this.getSelections(); if (null != a && a.length > 0) { let t = []; a.forEach((e => { const a = document.querySelector(`button[data-swc-option="${e.option}"]`); a && (a.click(), t.push(e)) })), this.setSelections(t) } } async loadCharactersList() { clearInterval(this.retryTimer), this.getCharactersFromApi().then((t => { this.populateCharactersList(t) })).catch((t => { this.showNoResultsTab(), console.error(t), this.retryTimer = setInterval((async () => { try { this.loadCharactersList() } catch (t) { console.error(t) } }), 6e4) })) } showNoResultsTab() { this.toggleTabs("tabNoContent") } showLoadingTab() { this.toggleTabs("tabLoading") } showCharactersTab() { this.toggleTabs("tabCharacters") } toggleTabs(t) { document.querySelectorAll(".tabitem").forEach((t => { t.classList.remove("active") })), document.querySelector(`#${t}`).classList.add("active") } resetSelections(t) { this.removeSelections(); document.querySelectorAll("#characters-list .planet-btn-sel.active").forEach((t => { this.unselectCharacterEl(t) })), this.calculateTotalCost(), this.createTargetTotal() } createTargetTotal() { const t = document.querySelectorAll(".planet-cost"), e = t.length; if (0 == e) return; const a = this.getRandomInt(1, Math.round(.7 * e)), r = this.getRandomInt(a, e); let s = 0; for (let e = a; e <= r; e++)t[e] && (s += parseFloat(t[e].innerText)); this.setTargetTotal(s) } setTargetTotal(t) { document.querySelector("#target-total").innerText = t.toLocaleString("en-US"), this.setDailyCostTargetTotal(t) } getRandomInt(t, e) { return t = Math.ceil(t), e = Math.floor(e), Math.floor(Math.random() * (e - t + 1)) + t } init() { window.onload = () => { this.loadCharactersList() }; const t = document.querySelector("#action-reset-selection"); t && t.addEventListener("click", this.resetSelections.bind(this)) } } const characterManager = new CharacterManager("/api/characters"); characterManager.init();
//# sourceMappingURL=site.min.js.map